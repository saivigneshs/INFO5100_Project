/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.InfraRole;

import Business.APIforSMS.APIforSMS;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HostGovtWorkRequest;
import Business.WorkQueue.LocInfraWorkRequest;
import Business.WorkQueue.HostLocWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Saivignesh Sridhar
 */
public class InfraRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LocationRequestJPanel
     */
    private final JPanel userProcessContainer;
    private final UserAccount account;
    private final EcoSystem business;
    public InfraRequestJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.business = business;
        initComponents();
        populateInfraRequests();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateInfraRequests() {
        DefaultTableModel model = (DefaultTableModel) tblInfraRequests.getModel();
        model.setRowCount(0);
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                for (WorkRequest workRequest : e.getWorkQueue().getWorkRequestList()) {
                    if (workRequest instanceof LocInfraWorkRequest) {
                        if (((LocInfraWorkRequest) workRequest).getInfra().getUsername().equals(account.getUsername())) {
                            Object[] row = new Object[model.getColumnCount()];
                            row[0] = workRequest;
                            row[1] = ((LocInfraWorkRequest) workRequest).getEventName();
                            row[2] = ((LocInfraWorkRequest) workRequest).getEvenCat();
                            row[3] = ((LocInfraWorkRequest) workRequest).getAttendance();
                            row[4] = ((LocInfraWorkRequest) workRequest).getPlannedDate();
                            row[5] = ((LocInfraWorkRequest) workRequest).getLocation();
                            if(((LocInfraWorkRequest) workRequest).getHost()!=null){
                            row[6] = ((LocInfraWorkRequest) workRequest).getHost().getCity();
                            }
                            row[7] = ((LocInfraWorkRequest) workRequest).getStatus();
                            row[8] = ((LocInfraWorkRequest) workRequest).getMessage();
                            row[9] = ((LocInfraWorkRequest) workRequest).getInfraNote();
                            model.addRow(row);
                        }
                    }
                }
            }
        }
    }
    
    public void bookInfra(HostLocWorkRequest request){
                    String comment = txtAddMsg.getText();
                    for (Network n : business.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if(org.getType().equals(Organization.Type.Infrastructure)){
                            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                                if ("Available".equals(ua.getStatus()) ) {
                                    LocInfraWorkRequest infraRequest = new LocInfraWorkRequest();                                                           
                                    infraRequest.setRequestID();
                                    infraRequest.setSender(account);
                                    infraRequest.setHost(account);
                                    infraRequest.setInfra(ua);
                                    infraRequest.setStatus("Pending");
                                    if (!comment.isEmpty()) infraRequest.setMessage(comment);
                                    infraRequest.setAttendance(request.getAttendance());
                                    infraRequest.setEventName(request.getEventName());
                                    infraRequest.setEvenCat(request.getEvenCat());
                                    infraRequest.setPlannedDate(request.getPlannedDate());
                                    infraRequest.setOrgType(Organization.Type.Infrastructure);
                                    
                                    
                                    e.getWorkQueue().getWorkRequestList().add(infraRequest);
                                    System.out.println("Request"+infraRequest.toString()+"  >> Added to Enterprise "+e);
                                    JOptionPane.showMessageDialog(null, "Infrastructure Request Sent Successfully!");
                                    APIforSMS sms = new APIforSMS(ua.getPhone(), "Hello "+ua.getName()+", Location Team:"+request.getLocation().getName()+" likes to book Infrastructure package on "+String.valueOf(infraRequest.getPlannedDate() ).substring(0,10)+". Kindly login for more details.");
                                    //system.sendEmailMessage(ua.getEmail(), "Hello! You have one new work request! Please login to know more!");
                                }
                            }
                        }
                        }
                    }
                }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRestWorkList = new javax.swing.JLabel();
        scrollOrderList = new javax.swing.JScrollPane();
        tblInfraRequests = new javax.swing.JTable();
        btnReject = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        blAddMessage = new javax.swing.JLabel();
        txtAddMsg = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 255));
        setForeground(new java.awt.Color(0, 51, 51));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblRestWorkList.setBackground(new java.awt.Color(204, 255, 255));
        lblRestWorkList.setFont(new java.awt.Font("Ebrima", 1, 18)); // NOI18N
        lblRestWorkList.setForeground(new java.awt.Color(0, 51, 51));
        lblRestWorkList.setText("Infrastructure Requests");
        add(lblRestWorkList, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 24, -1, -1));

        tblInfraRequests.setBackground(new java.awt.Color(204, 204, 255));
        tblInfraRequests.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        tblInfraRequests.setForeground(new java.awt.Color(0, 51, 51));
        tblInfraRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Request Type", "Event Name", "Event Category", "Attendance", "Planned Date", "Location", "Host City", "Status", "Message from Loc Team", "Infra Team Response"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollOrderList.setViewportView(tblInfraRequests);

        add(scrollOrderList, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 843, 110));

        btnReject.setBackground(new java.awt.Color(204, 255, 255));
        btnReject.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        btnReject.setForeground(new java.awt.Color(0, 51, 51));
        btnReject.setText("Reject Request");
        btnReject.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 290, 110, 30));

        btnApprove.setBackground(new java.awt.Color(204, 255, 255));
        btnApprove.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        btnApprove.setForeground(new java.awt.Color(0, 51, 51));
        btnApprove.setText("Approve Request");
        btnApprove.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        add(btnApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, 110, 30));

        blAddMessage.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        blAddMessage.setForeground(new java.awt.Color(41, 50, 80));
        blAddMessage.setText("Additional Message:");
        add(blAddMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, -1, -1));

        txtAddMsg.setBackground(new java.awt.Color(204, 204, 255));
        add(txtAddMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 200, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblInfraRequests.getSelectedRow();
        if (selectedRow >= 0) {
            HostLocWorkRequest request = (HostLocWorkRequest) tblInfraRequests.getValueAt(selectedRow, 0);
            String message = txtAddMsg.getText();
            if (message.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Kindly enter the reason for Rejection");
                return;
            }
            if (!"Completed".equals(request.getStatus()) && !"In Progress".equals(request.getStatus())) {
                request.setStatus("Rejected");
                request.setMessage(message);
                JOptionPane.showMessageDialog(null, "Event Rejected!");
                    account.setStatus("Available");
                populateInfraRequests();
            } else {
                JOptionPane.showMessageDialog(null, "Event is already " + request.getStatus());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kindly select a row.");
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblInfraRequests.getSelectedRow();
        if (selectedRow >= 0) {
            LocInfraWorkRequest request = (LocInfraWorkRequest) tblInfraRequests.getValueAt(selectedRow, 0);
            String message = txtAddMsg.getText();
            if (message.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Kindly enter additional details to the Host.");
                return;
            }
            if (!request.getStatus().equals("Awaiting Govt Approval")) {
            if (!"Event Authorized".equals(request.getStatus())) {
                request.setStatus("Infrastructure Prepared");
                request.setMessage(message);
                JOptionPane.showMessageDialog(null, "Infrastructure Package is Prepared!");
                    account.setStatus("Booked");
                populateInfraRequests();
            } else {
                JOptionPane.showMessageDialog(null, "Event is already Authorized!");
            }
            } else {
                JOptionPane.showMessageDialog(null, "Select an appropriate Event!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select one row!");
        }
    }//GEN-LAST:event_btnApproveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blAddMessage;
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel lblRestWorkList;
    private javax.swing.JScrollPane scrollOrderList;
    private javax.swing.JTable tblInfraRequests;
    private javax.swing.JTextField txtAddMsg;
    // End of variables declaration//GEN-END:variables
}
